// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import { Account, User, AuthPayload, Context } from "../types";

export type UserRoleType = "USER" | "ADMIN";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export type AccountsResolver =
    | ((
        parent: undefined,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Account[] | Promise<Account[]>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Account[] | Promise<Account[]>;
      };

  export interface Type {
    accounts:
      | ((
          parent: undefined,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Account[] | Promise<Account[]>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Account[] | Promise<Account[]>;
        };
  }
}

export namespace AccountResolvers {
  export const defaultResolvers = {
    id: (parent: Account) => parent.id,
    name: (parent: Account) => parent.name
  };

  export type IdResolver =
    | ((
        parent: Account,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Account,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: Account,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: Account,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type UsersResolver =
    | ((
        parent: Account,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User[] | Promise<User[]>)
    | {
        fragment: string;
        resolve: (
          parent: Account,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>;
      };

  export interface Type {
    id:
      | ((
          parent: Account,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Account,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: Account,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: Account,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    users:
      | ((
          parent: Account,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User[] | Promise<User[]>)
      | {
          fragment: string;
          resolve: (
            parent: Account,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User[] | Promise<User[]>;
        };
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    name: (parent: User) => parent.name,
    email: (parent: User) => parent.email,
    role: (parent: User) => parent.role
  };

  export type IdResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type NameResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type EmailResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export type RoleResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => UserRoleType | Promise<UserRoleType>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserRoleType | Promise<UserRoleType>;
      };

  export type AccountsResolver =
    | ((
        parent: User,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => Account[] | Promise<Account[]>)
    | {
        fragment: string;
        resolve: (
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Account[] | Promise<Account[]>;
      };

  export interface Type {
    id:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    name:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    email:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };

    role:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => UserRoleType | Promise<UserRoleType>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => UserRoleType | Promise<UserRoleType>;
        };

    accounts:
      | ((
          parent: User,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => Account[] | Promise<Account[]>)
      | {
          fragment: string;
          resolve: (
            parent: User,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => Account[] | Promise<Account[]>;
        };
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface CreateUserInput {
    name: string;
    email: string;
    password: string;
  }
  export interface AuthInput {
    email: string;
    password: string;
  }

  export interface ArgsCreateUser {
    data: CreateUserInput;
  }

  export interface ArgsLoginUser {
    data: AuthInput;
  }

  export type CreateUserResolver =
    | ((
        parent: undefined,
        args: ArgsCreateUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | Promise<AuthPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>;
      };

  export type LoginUserResolver =
    | ((
        parent: undefined,
        args: ArgsLoginUser,
        ctx: Context,
        info: GraphQLResolveInfo
      ) => AuthPayload | Promise<AuthPayload>)
    | {
        fragment: string;
        resolve: (
          parent: undefined,
          args: ArgsLoginUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>;
      };

  export interface Type {
    createUser:
      | ((
          parent: undefined,
          args: ArgsCreateUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsCreateUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | Promise<AuthPayload>;
        };

    loginUser:
      | ((
          parent: undefined,
          args: ArgsLoginUser,
          ctx: Context,
          info: GraphQLResolveInfo
        ) => AuthPayload | Promise<AuthPayload>)
      | {
          fragment: string;
          resolve: (
            parent: undefined,
            args: ArgsLoginUser,
            ctx: Context,
            info: GraphQLResolveInfo
          ) => AuthPayload | Promise<AuthPayload>;
        };
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type UserResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => User | Promise<User>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>;
      };

  export type TokenResolver =
    | ((
        parent: AuthPayload,
        args: {},
        ctx: Context,
        info: GraphQLResolveInfo
      ) => string | Promise<string>)
    | {
        fragment: string;
        resolve: (
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>;
      };

  export interface Type {
    user:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => User | Promise<User>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => User | Promise<User>;
        };

    token:
      | ((
          parent: AuthPayload,
          args: {},
          ctx: Context,
          info: GraphQLResolveInfo
        ) => string | Promise<string>)
      | {
          fragment: string;
          resolve: (
            parent: AuthPayload,
            args: {},
            ctx: Context,
            info: GraphQLResolveInfo
          ) => string | Promise<string>;
        };
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  Account: AccountResolvers.Type;
  User: UserResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
}

// @ts-ignore
declare module "graphql-tools" {
  interface IResolvers extends Resolvers {}
}
